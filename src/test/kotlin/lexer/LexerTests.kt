package lexer

import org.example.lexer.LexerFactory
import org.example.lexer.lexWith
import org.example.token.*
import org.junit.jupiter.api.Assertions.assertEquals
import org.junit.jupiter.api.Test
import util.loadSource

class LexerTests {
    private fun testLexing(
        source: String,
        expected: List<Token>,
    ) {
        val actual = loadSource(source).lexWith(LexerFactory().createLexer()).toList()

        assertEquals(
            expected,
            actual,
            "different lexing results",
        )
    }

    @Test
    fun smoke_small() {
        testLexing(
            "src/test/resources/small_source.txt",
            listOf(
                Identifier("a"),
                WhiteSpace,
                Identifier("+"),
                WhiteSpace,
                LeftParen,
                Identifier("b"),
                WhiteSpace,
                Identifier("*"),
                WhiteSpace,
                Identifier("c"),
                RightParen,
                NewLine,
                EOF,
            ),
        )
    }

    @Test
    fun smoke() {
        testLexing(
            "src/test/resources/test_source.txt",
            listOf(
                FunKeyword,
                WhiteSpace,
                Identifier("factorial"),
                LeftParen,
                Identifier("a"),
                Colon,
                WhiteSpace,
                Identifier("Int"),
                RightParen,
                WhiteSpace,
                LeftCurl,
                NewLine,
                WhiteSpace,
                IfKeyword,
                WhiteSpace,
                LeftParen,
                Identifier("a"),
                WhiteSpace,
                Identifier("=="),
                WhiteSpace,
                DecimalLiteral(0),
                RightParen,
                WhiteSpace,
                ReturnKeyword,
                WhiteSpace,
                DecimalLiteral(1),
                NewLine,
                WhiteSpace,
                NewLine,
                WhiteSpace,
                ReturnKeyword,
                WhiteSpace,
                Identifier("a"),
                WhiteSpace,
                Identifier("*"),
                WhiteSpace,
                Identifier("factorial"),
                LeftParen,
                Identifier("a"),
                WhiteSpace,
                Identifier("-"),
                WhiteSpace,
                BinaryLiteral(1),
                RightParen,
                NewLine,
                RightCurl,
                NewLine,
                NewLine,
                FunKeyword,
                WhiteSpace,
                Identifier("main"),
                LeftParen,
                RightParen,
                WhiteSpace,
                LeftCurl,
                NewLine,
                WhiteSpace,
                ValKeyword,
                WhiteSpace,
                Identifier("abc"),
                WhiteSpace,
                Identifier("="),
                WhiteSpace,
                HexadecimalLiteral(10_486_027),
                NewLine,
                WhiteSpace,
                ValKeyword,
                WhiteSpace,
                Identifier("_gg0"),
                WhiteSpace,
                Identifier("="),
                WhiteSpace,
                Identifier("factorial"),
                LeftParen,
                DecimalLiteral(10),
                RightParen,
                WhiteSpace,
                InlineComment,
                NewLine,
                NewLine,
                WhiteSpace,
                Identifier("abc"),
                WhiteSpace,
                Identifier("="),
                WhiteSpace,
                LeftParen,
                Identifier("abc"),
                Identifier("+"),
                Identifier("_gg0"),
                RightParen,
                Identifier("/"),
                BinaryLiteral(2),
                NewLine,
                NewLine,
                WhiteSpace,
                ReturnKeyword,
                WhiteSpace,
                DecimalLiteral(0),
                NewLine,
                RightCurl,
                NewLine,
                EOF,
            ),
        )
    }

    @Test
    fun testEverything() =
        testLexing(
            "src/test/resources/lex_test.txt",
            listOf(
                FunKeyword,
                WhiteSpace,
                ValKeyword,
                WhiteSpace,
                IfKeyword,
                WhiteSpace,
                ElseKeyword,
                WhiteSpace,
                Identifier("funval"),
                Comma,
                Identifier("fun0"),
                Comma,
                DecimalLiteral(0),
                ElseKeyword,
                NewLine,
                CharLiteral('a'),
                WhiteSpace,
                CharLiteral('\n'),
                WhiteSpace,
                BadCharLiteral,
                WhiteSpace,
                CharLiteral('j'),
                CharLiteral('v'),
                WhiteSpace,
                BadCharLiteral,
                BadCharLiteral,
                NewLine,
                StringLiteral("ololo"),
                WhiteSpace,
                StringLiteral("ol\r\n"),
                WhiteSpace,
                StringLiteral("\""),
                WhiteSpace,
                BadStringLiteral,
                NewLine,
                Identifier("a"),
                WhiteSpace,
                Identifier("++"),
                WhiteSpace,
                Identifier("+"),
                WhiteSpace,
                Identifier("b"),
                Identifier("+++"),
                WhiteSpace,
                Identifier("++"),
                Identifier("v"),
                WhiteSpace,
                Identifier("-==+"),
                WhiteSpace,
                Identifier("g"),
                Colon,
                Colon,
                Identifier("g"),
                WhiteSpace,
                Identifier("+"),
                Identifier("_"),
                Identifier("+"),
                WhiteSpace,
                Identifier("__001"),
                WhiteSpace,
                Identifier("+"),
                WhiteSpace,
                Identifier("_llp"),
                NewLine,
                DecimalLiteral(110),
                WhiteSpace,
                DecimalLiteral(16),
                WhiteSpace,
                DecimalLiteral(771),
                WhiteSpace,
                DecimalLiteral(3),
                NewLine,
                LeftCurl,
                RightParen,
                LeftParen,
                RightCurl,
                WhiteSpace,
                LeftParen,
                Identifier("+"),
                LeftParen,
                RightParen,
                Identifier("-"),
                RightCurl,
                WhiteSpace,
                Identifier("kk0"),
                WhiteSpace,
                DecimalLiteral(0),
                Identifier("kk"),
                WhiteSpace,
                Identifier("hhh"),
                Identifier("-"),
                DecimalLiteral(1),
                NewLine,
                BinaryLiteral(0),
                WhiteSpace,
                HexadecimalLiteral(0),
                WhiteSpace,
                BinaryLiteral(0),
                WhiteSpace,
                HexadecimalLiteral(0),
                WhiteSpace,
                HexadecimalLiteral(2570),
                WhiteSpace,
                BinaryLiteral(2),
                WhiteSpace,
                BinaryLiteral(1),
                WhiteSpace,
                BinaryLiteral(3),
                DecimalLiteral(2),
                WhiteSpace,
                BinaryLiteral(1),
                Identifier("b1"),
                NewLine,
                BadCharLiteral,
                EOF,
            ),
        )
}
